<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8" />
  <title>VIN Decoder (Add & Customize Fields)</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    textarea {
      width: 100%;
    }
    #resultsContainer > div {
      border: 1px solid #ccc;
      padding: 8px;
      margin-bottom: 8px;
    }
    h3 {
      margin: 0 0 8px 0;
    }
    /* Modal Overlay */
    #modalOverlay {
      position: fixed; 
      top: 0; 
      left: 0; 
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      display: none; 
      justify-content: center; 
      align-items: center;
      z-index: 9999;
    }
    /* Modal Window */
    #modal {
      background: #fff;
      padding: 20px;
      width: 500px;
      max-width: 90%;
      box-shadow: 0 2px 10px rgba(0,0,0,0.3);
      max-height: 90%;
      overflow-y: auto;
      position: relative;
    }
    #fieldList {
      max-height: 300px;
      overflow-y: auto;
      border: 1px solid #ddd;
      padding: 0;
      margin: 0;
    }
    #fieldList li {
      list-style: none;
      padding: 6px;
      border-bottom: 1px solid #eee;
      display: flex; 
      align-items: center;
      justify-content: space-between;
    }
    #fieldList li label {
      flex-grow: 1;
      margin-left: 6px;
    }
    #fieldList li button {
      margin: 0 4px;
    }
    .modal-actions {
      margin-top: 10px;
    }
    .add-field-form {
      margin: 10px 0;
      padding: 10px;
      border: 1px solid #ccc;
    }
    .add-field-form input {
      margin-bottom: 6px;
      display: block;
      width: 100%;
      box-sizing: border-box;
    }
    .close-modal {
      position: absolute;
      top: 8px;
      right: 8px;
      background: none;
      border: none;
      font-size: 16px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1>VIN Decoder (Add & Customize Fields)</h1>
  
  <p>Paste your VINs (one per line) below, then click "Decode VINs".</p>
  <textarea id="vinInput" rows="10" placeholder="Paste VINs here, one per line"></textarea>
  <br />
  
  <button id="decodeBtn">Decode VINs</button>
  <button id="clearBtn">Clear</button>
  <button id="customizeBtn">Customize Fields</button>
  
  <h2>Decoded Results</h2>
  <div id="resultsContainer"></div>
  
  <!-- Modal Overlay -->
  <div id="modalOverlay">
    <div id="modal">
      <button class="close-modal" title="Close" id="closeModalBtn">âœ•</button>
      <h3>Customize Fields & Order</h3>
      <p>Use the checkboxes to enable/disable fields. Use Up/Down to reorder.</p>
      
      <ul id="fieldList"></ul>
      
      <!-- Add new field form -->
      <div class="add-field-form">
        <h4>Add New Field</h4>
        <input type="text" id="addFieldId" placeholder="Numeric ID (optional)" />
        <input type="text" id="addFieldLabel" placeholder="Field Label" />
        <input type="text" id="addFieldProperty" placeholder="Property Name in NHTSA JSON" />
        <button id="addFieldBtn">Add Field</button>
      </div>
      
      <div class="modal-actions">
        <button id="saveCustomFieldsBtn">Save</button>
        <button id="resetDefaultFieldsBtn">Restore Default Fields</button>
      </div>
    </div>
  </div>
  
  <script>
    // ---------------------------------------------------------------------
    // 1) MASTER LIST OF KNOWN FIELDS (from your big list)
    //    By default, we can set them all to disabled, or just let the code
    //    enable whichever we want for "defaults."
    //
    //    propertyName: Must match the key from the NHTSA "flat" JSON response.
    //    numericId:    For reference only (from the list you provided).
    //    label:        Display name in the UI.
    //    enabled:      We'll set them to false initially, then we'll enable
    //                  certain ones by default or let the user choose.
    // ---------------------------------------------------------------------
    const masterFieldsList = [
      { numericId: 1,   label: 'Other Battery Info',   propertyName: 'OtherBatteryInfo', enabled: false },
      { numericId: 2,   label: 'Battery Type',         propertyName: 'BatteryType', enabled: false },
      { numericId: 3,   label: 'Bed Type',             propertyName: 'BedType', enabled: false },
      { numericId: 4,   label: 'Cab Type',             propertyName: 'CabType', enabled: false },
      { numericId: 5,   label: 'Body Class',           propertyName: 'BodyClass', enabled: false },
      { numericId: 9,   label: 'Engine Number of Cylinders', propertyName: 'EngineNumberOfCylinders', enabled: false },
      { numericId: 10,  label: 'Destination Market',    propertyName: 'DestinationMarket', enabled: false },
      { numericId: 11,  label: 'Displacement (CC)',     propertyName: 'DisplacementCC', enabled: false },
      { numericId: 12,  label: 'Displacement (CI)',     propertyName: 'DisplacementCI', enabled: false },
      { numericId: 13,  label: 'Displacement (L)',      propertyName: 'DisplacementL', enabled: false },
      { numericId: 14,  label: 'Doors',                 propertyName: 'Doors', enabled: false },
      { numericId: 15,  label: 'Drive Type',            propertyName: 'DriveType', enabled: false },
      { numericId: 17,  label: 'Engine Stroke Cycles',  propertyName: 'EngineStrokeCycles', enabled: false },
      { numericId: 18,  label: 'Engine Model',          propertyName: 'EngineModel', enabled: false },
      { numericId: 21,  label: 'Engine Power (kW)',     propertyName: 'EnginePowerkW', enabled: false },
      { numericId: 23,  label: 'Entertainment System',  propertyName: 'EntertainmentSystem', enabled: false },
      { numericId: 24,  label: 'Fuel Type - Primary',   propertyName: 'FuelTypePrimary', enabled: false },
      { numericId: 25,  label: 'Gross Vehicle Weight Rating From', propertyName: 'GVWRFrom', enabled: false },
      { numericId: 26,  label: 'Make',                  propertyName: 'Make', enabled: false },
      { numericId: 27,  label: 'Manufacturer Name',     propertyName: 'ManufacturerName', enabled: false },
      { numericId: 28,  label: 'Model',                 propertyName: 'Model', enabled: false },
      { numericId: 29,  label: 'Model Year',            propertyName: 'ModelYear', enabled: false },
      { numericId: 31,  label: 'Plant City',            propertyName: 'PlantCity', enabled: false },
      { numericId: 33,  label: 'Number of Seats',       propertyName: 'NumberOfSeats', enabled: false },
      { numericId: 34,  label: 'Series',                propertyName: 'Series', enabled: false },
      { numericId: 36,  label: 'Steering Location',     propertyName: 'SteeringLocation', enabled: false },
      { numericId: 37,  label: 'Transmission Style',    propertyName: 'TransmissionStyle', enabled: false },
      { numericId: 38,  label: 'Trim',                  propertyName: 'Trim', enabled: false },
      { numericId: 39,  label: 'Vehicle Type',          propertyName: 'VehicleType', enabled: false },
      { numericId: 40,  label: 'Windows',               propertyName: 'Windows', enabled: false },
      { numericId: 41,  label: 'Axles',                 propertyName: 'Axles', enabled: false },
      { numericId: 42,  label: 'Brake System Type',     propertyName: 'BrakeSystemType', enabled: false },
      { numericId: 48,  label: 'Number of Battery Cells per Module', propertyName: 'NumberofBatteryCellsperModule', enabled: false },
      { numericId: 49,  label: 'Bed Length (inches)',   propertyName: 'BedLengthInches', enabled: false },
      { numericId: 52,  label: 'Brake System Description', propertyName: 'BrakeSystemDescription', enabled: false },
      { numericId: 54,  label: 'Curb Weight (pounds)',  propertyName: 'CurbWeightPounds', enabled: false },
      { numericId: 55,  label: 'Curtain Air Bag Locations', propertyName: 'CurtainAirBagLocations', enabled: false },
      { numericId: 56,  label: 'Seat Cushion Air Bag Locations', propertyName: 'SeatCushionAirBagLocations', enabled: false },
      { numericId: 57,  label: 'Battery Current (Amps) From', propertyName: 'BatteryCurrentAmpsFrom', enabled: false },
      { numericId: 58,  label: 'Battery Voltage (Volts) From', propertyName: 'BatteryVoltageVoltsFrom', enabled: false },
      { numericId: 59,  label: 'Battery Energy (kWh) From', propertyName: 'BatteryEnergykWhFrom', enabled: false },
      { numericId: 60,  label: 'Wheel Base Type',       propertyName: 'WheelBaseType', enabled: false },
      { numericId: 61,  label: 'Number of Seat Rows',   propertyName: 'NumberOfSeatRows', enabled: false },
      { numericId: 62,  label: 'Valve Train Design',    propertyName: 'ValveTrainDesign', enabled: false },
      { numericId: 63,  label: 'Transmission Speeds',   propertyName: 'TransmissionSpeeds', enabled: false },
      { numericId: 64,  label: 'Engine Configuration',  propertyName: 'EngineConfiguration', enabled: false },
      { numericId: 65,  label: 'Front Air Bag Locations', propertyName: 'FrontAirBagLocations', enabled: false },
      { numericId: 66,  label: 'Fuel Type - Secondary', propertyName: 'FuelTypeSecondary', enabled: false },
      { numericId: 67,  label: 'Fuel Delivery / Fuel Injection Type', propertyName: 'FuelDeliveryFuelInjectionType', enabled: false },
      { numericId: 69,  label: 'Knee Air Bag Locations', propertyName: 'KneeAirBagLocations', enabled: false },
      { numericId: 71,  label: 'Engine Brake (hp) From', propertyName: 'EngineBrakeHpFrom', enabled: false },
      { numericId: 72,  label: 'EV Drive Unit',         propertyName: 'EVDriveUnit', enabled: false },
      { numericId: 75,  label: 'Plant Country',         propertyName: 'PlantCountry', enabled: false },
      { numericId: 76,  label: 'Plant Company Name',    propertyName: 'PlantCompanyName', enabled: false },
      { numericId: 77,  label: 'Plant State',           propertyName: 'PlantState', enabled: false },
      { numericId: 78,  label: 'Pretensioner',          propertyName: 'Pretensioner', enabled: false },
      { numericId: 79,  label: 'Seat Belt Type',        propertyName: 'SeatBeltType', enabled: false },
      { numericId: 81,  label: 'Adaptive Cruise Control (ACC)', propertyName: 'AdaptiveCruiseControl', enabled: false },
      { numericId: 86,  label: 'Anti-lock Braking System (ABS)', propertyName: 'ABS', enabled: false },
      { numericId: 87,  label: 'Crash Imminent Braking (CIB)', propertyName: 'CrashImminentBraking', enabled: false },
      { numericId: 88,  label: 'Blind Spot Warning (BSW)', propertyName: 'BlindSpotWarning', enabled: false },
      { numericId: 96,  label: 'NCSA Body Type',        propertyName: 'NCSABodyType', enabled: false },
      { numericId: 97,  label: 'NCSA Make',             propertyName: 'NCSAMake', enabled: false },
      { numericId: 98,  label: 'NCSA Model',            propertyName: 'NCSAModel', enabled: false },
      { numericId: 99,  label: 'Electronic Stability Control (ESC)', propertyName: 'ESC', enabled: false },
      { numericId: 100, label: 'Traction Control',      propertyName: 'TractionControl', enabled: false },
      { numericId: 101, label: 'Forward Collision Warning (FCW)', propertyName: 'ForwardCollisionWarning', enabled: false },
      { numericId: 102, label: 'Lane Departure Warning (LDW)', propertyName: 'LaneDepartureWarning', enabled: false },
      { numericId: 103, label: 'Lane Keeping Assistance (LKA)', propertyName: 'LaneKeepingAssistance', enabled: false },
      { numericId: 104, label: 'Backup Camera',         propertyName: 'BackupCamera', enabled: false },
      { numericId: 105, label: 'Parking Assist',        propertyName: 'ParkingAssist', enabled: false },
      { numericId: 107, label: 'Side Air Bag Locations',propertyName: 'SideAirBagLocations', enabled: false },
      { numericId: 109, label: 'Trim2',                 propertyName: 'Trim2', enabled: false },
      { numericId: 110, label: 'Series2',               propertyName: 'Series2', enabled: false },
      { numericId: 111, label: 'Wheel Base (inches) From', propertyName: 'WheelBaseInchesFrom', enabled: false },
      { numericId: 112, label: 'Wheel Base (inches) To',   propertyName: 'WheelBaseInchesTo', enabled: false },
      { numericId: 114, label: 'Note',                  propertyName: 'Note', enabled: false },
      { numericId: 115, label: 'Number of Wheels',      propertyName: 'NumberOfWheels', enabled: false },
      { numericId: 116, label: 'Trailer Type Connection', propertyName: 'TrailerTypeConnection', enabled: false },
      { numericId: 117, label: 'Trailer Body Type',     propertyName: 'TrailerBodyType', enabled: false },
      { numericId: 118, label: 'Trailer Length (feet)', propertyName: 'TrailerLengthFeet', enabled: false },
      { numericId: 119, label: 'Wheel Size Front (inches)', propertyName: 'WheelSizeFrontInches', enabled: false },
      { numericId: 120, label: 'Wheel Size Rear (inches)',  propertyName: 'WheelSizeRearInches', enabled: false },
      { numericId: 121, label: 'Other Restraint System Info', propertyName: 'OtherRestraintSystemInfo', enabled: false },
      { numericId: 122, label: 'Cooling Type',          propertyName: 'CoolingType', enabled: false },
      { numericId: 125, label: 'Engine Brake (hp) To',  propertyName: 'EngineBrakeHpTo', enabled: false },
      { numericId: 126, label: 'Electrification Level', propertyName: 'ElectrificationLevel', enabled: false },
      { numericId: 127, label: 'Charger Level',         propertyName: 'ChargerLevel', enabled: false },
      { numericId: 128, label: 'Charger Power (kW)',    propertyName: 'ChargerPowerkW', enabled: false },
      { numericId: 129, label: 'Other Engine Info',     propertyName: 'OtherEngineInfo', enabled: false },
      { numericId: 132, label: 'Battery Current (Amps) To', propertyName: 'BatteryCurrentAmpsTo', enabled: false },
      { numericId: 133, label: 'Battery Voltage (Volts) To', propertyName: 'BatteryVoltageVoltsTo', enabled: false },
      { numericId: 134, label: 'Battery Energy (kWh) To', propertyName: 'BatteryEnergykWhTo', enabled: false },
      { numericId: 135, label: 'Turbo',                 propertyName: 'Turbo', enabled: false },
      { numericId: 136, label: 'Base Price ($)',        propertyName: 'BasePrice', enabled: false },
      { numericId: 137, label: 'Number of Battery Modules per Pack', propertyName: 'NumberofBatteryModulesperPack', enabled: false },
      { numericId: 138, label: 'Number of Battery Packs per Vehicle', propertyName: 'NumberofBatteryPacksperVehicle', enabled: false },
      { numericId: 139, label: 'Top Speed (MPH)',       propertyName: 'TopSpeedMPH', enabled: false },
      { numericId: 142, label: 'Suggested VIN',         propertyName: 'SuggestedVIN', enabled: false },
      { numericId: 143, label: 'Error Code',            propertyName: 'ErrorCode', enabled: false },
      { numericId: 144, label: 'Possible Values',       propertyName: 'PossibleValues', enabled: false },
      { numericId: 145, label: 'Axle Configuration',    propertyName: 'AxleConfiguration', enabled: false },
      { numericId: 146, label: 'Engine Manufacturer',   propertyName: 'EngineManufacturer', enabled: false },
      { numericId: 147, label: 'Bus Length (feet)',     propertyName: 'BusLengthFeet', enabled: false },
      { numericId: 148, label: 'Bus Floor Configuration Type', propertyName: 'BusFloorConfigurationType', enabled: false },
      { numericId: 149, label: 'Bus Type',              propertyName: 'BusType', enabled: false },
      { numericId: 150, label: 'Other Bus Info',        propertyName: 'OtherBusInfo', enabled: false },
      { numericId: 151, label: 'Custom Motorcycle Type', propertyName: 'CustomMotorcycleType', enabled: false },
      { numericId: 152, label: 'Motorcycle Suspension Type', propertyName: 'MotorcycleSuspensionType', enabled: false },
      { numericId: 153, label: 'Motorcycle Chassis Type', propertyName: 'MotorcycleChassisType', enabled: false },
      { numericId: 154, label: 'Other Motorcycle Info', propertyName: 'OtherMotorcycleInfo', enabled: false },
      { numericId: 155, label: 'Other Trailer Info',    propertyName: 'OtherTrailerInfo', enabled: false },
      { numericId: 156, label: 'Additional Error Text', propertyName: 'AdditionalErrorText', enabled: false },
      { numericId: 159, label: 'Track Width (inches)',  propertyName: 'TrackWidthInches', enabled: false },
      { numericId: 168, label: 'Tire Pressure Monitoring System (TPMS) Type', propertyName: 'TPMSType', enabled: false },
      { numericId: 169, label: 'Active Safety System Note', propertyName: 'ActiveSafetySystemNote', enabled: false },
      { numericId: 170, label: 'Dynamic Brake Support (DBS)', propertyName: 'DynamicBrakeSupport', enabled: false },
      { numericId: 171, label: 'Pedestrian Automatic Emergency Braking (PAEB)', propertyName: 'PedestrianAEB', enabled: false },
      { numericId: 172, label: 'Auto-Reverse System for Windows and Sunroofs', propertyName: 'AutoReverseSystemWindowsSunroofs', enabled: false },
      { numericId: 173, label: 'Automatic Pedestrian Alerting Sound (Hybrid/EV)', propertyName: 'AutomaticPedestrianAlertingSound', enabled: false },
      { numericId: 174, label: 'Automatic Crash Notification (ACN)', propertyName: 'ACN', enabled: false },
      { numericId: 175, label: 'Event Data Recorder (EDR)', propertyName: 'EDR', enabled: false },
      { numericId: 176, label: 'Keyless Ignition',      propertyName: 'KeylessIgnition', enabled: false },
      { numericId: 177, label: 'Daytime Running Light (DRL)', propertyName: 'DRL', enabled: false },
      { numericId: 178, label: 'Headlamp Light Source', propertyName: 'HeadlampLightSource', enabled: false },
      { numericId: 179, label: 'Semiautomatic Headlamp Beam Switching', propertyName: 'SemiautomaticHeadlampBeamSwitching', enabled: false },
      { numericId: 180, label: 'Adaptive Driving Beam (ADB)', propertyName: 'AdaptiveDrivingBeam', enabled: false },
      { numericId: 181, label: 'SAE Automation Level From', propertyName: 'SAEAutomationLevelFrom', enabled: false },
      { numericId: 182, label: 'SAE Automation Level To', propertyName: 'SAEAutomationLevelTo', enabled: false },
      { numericId: 183, label: 'Rear Cross Traffic Alert', propertyName: 'RearCrossTrafficAlert', enabled: false },
      { numericId: 184, label: 'Gross Combination Weight Rating From', propertyName: 'GCWRFrom', enabled: false },
      { numericId: 185, label: 'Gross Combination Weight Rating To',   propertyName: 'GCWRTo', enabled: false },
      { numericId: 186, label: 'NCSA Note',             propertyName: 'NCSANote', enabled: false },
      { numericId: 190, label: 'Gross Vehicle Weight Rating To', propertyName: 'GVWRTo', enabled: false },
      { numericId: 191, label: 'Error Text',            propertyName: 'ErrorText', enabled: false },
      { numericId: 192, label: 'Rear Automatic Emergency Braking', propertyName: 'RearAutomaticEmergencyBraking', enabled: false },
      { numericId: 193, label: 'Blind Spot Intervention (BSI)', propertyName: 'BlindSpotIntervention', enabled: false },
      { numericId: 194, label: 'Lane Centering Assistance', propertyName: 'LaneCenteringAssistance', enabled: false },
      { numericId: 195, label: 'Non-Land Use',          propertyName: 'NonLandUse', enabled: false },
      { numericId: 196, label: 'Vehicle Descriptor',    propertyName: 'VehicleDescriptor', enabled: false },
    ];

    // If you want certain fields ON by default (e.g., a minimal set),
    // list their numeric IDs here. The code will enable them on first load.
    const DEFAULT_ENABLED_FIELD_IDS = [29, 26, 28]; 
    // e.g., 29 = Model Year, 26 = Make, 28 = Model
    // You can add as many as you want. Or empty array if you want them all off.
    
    // -----------------------------------------
    // 2) CURRENT FIELDS & LOCALSTORAGE
    // -----------------------------------------
    // We'll store the user's current configuration in an array called currentFieldsList,
    // which is loaded from localStorage or derived from the master list.

    let currentFieldsList = [];

    function loadFieldConfig() {
      const saved = localStorage.getItem('vinDecoderFields');
      if (saved) {
        // If we have a saved config, use it
        currentFieldsList = JSON.parse(saved);
      } else {
        // If no saved config, derive from the master list
        // enabling some default fields
        currentFieldsList = masterFieldsList.map(field => {
          // Check if numericId is in DEFAULT_ENABLED_FIELD_IDS
          return {
            ...field,
            enabled: DEFAULT_ENABLED_FIELD_IDS.includes(field.numericId)
          };
        });
      }
    }

    function saveFieldConfig() {
      localStorage.setItem('vinDecoderFields', JSON.stringify(currentFieldsList));
    }

    // Initialize on page load
    loadFieldConfig();

    // DOM Elements
    const decodeBtn = document.getElementById('decodeBtn');
    const clearBtn = document.getElementById('clearBtn');
    const vinInput = document.getElementById('vinInput');
    const resultsContainer = document.getElementById('resultsContainer');

    const modalOverlay = document.getElementById('modalOverlay');
    const modal = document.getElementById('modal');
    const fieldListEl = document.getElementById('fieldList');
    const saveCustomFieldsBtn = document.getElementById('saveCustomFieldsBtn');
    const resetDefaultFieldsBtn = document.getElementById('resetDefaultFieldsBtn');
    const closeModalBtn = document.getElementById('closeModalBtn');
    const customizeBtn = document.getElementById('customizeBtn');

    // "Add field" form elements
    const addFieldId = document.getElementById('addFieldId');
    const addFieldLabel = document.getElementById('addFieldLabel');
    const addFieldProperty = document.getElementById('addFieldProperty');
    const addFieldBtn = document.getElementById('addFieldBtn');

    // -----------------------------------------
    // 3) MODAL (CUSTOMIZE FIELDS) LOGIC
    // -----------------------------------------
    function openModal() {
      buildFieldListUI();
      modalOverlay.style.display = 'flex';
    }

    function closeModal() {
      modalOverlay.style.display = 'none';
    }

    // Build the list of fields with checkboxes and up/down buttons
    function buildFieldListUI() {
      fieldListEl.innerHTML = '';
      currentFieldsList.forEach((field, index) => {
        const li = document.createElement('li');
        
        // Up button
        const upBtn = document.createElement('button');
        upBtn.textContent = 'â†‘';
        upBtn.addEventListener('click', () => {
          if (index > 0) {
            const temp = currentFieldsList[index];
            currentFieldsList[index] = currentFieldsList[index - 1];
            currentFieldsList[index - 1] = temp;
            buildFieldListUI();
          }
        });

        // Down button
        const downBtn = document.createElement('button');
        downBtn.textContent = 'â†“';
        downBtn.addEventListener('click', () => {
          if (index < currentFieldsList.length - 1) {
            const temp = currentFieldsList[index];
            currentFieldsList[index] = currentFieldsList[index + 1];
            currentFieldsList[index + 1] = temp;
            buildFieldListUI();
          }
        });

        // Checkbox
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.checked = field.enabled !== false;
        checkbox.addEventListener('change', () => {
          field.enabled = checkbox.checked;
        });
        
        // Label
        const label = document.createElement('label');
        label.textContent = `${field.label} (${field.numericId || 'N/A'})`;
        
        li.appendChild(upBtn);
        li.appendChild(downBtn);
        li.appendChild(checkbox);
        li.appendChild(label);
        fieldListEl.appendChild(li);
      });
    }

    // Save button
    saveCustomFieldsBtn.addEventListener('click', () => {
      // The userâ€™s changes are already reflected in currentFieldsList
      saveFieldConfig();
      closeModal();
    });

    // Restore defaults
    resetDefaultFieldsBtn.addEventListener('click', () => {
      // Re-derive from the master list with default enabled fields
      currentFieldsList = masterFieldsList.map(field => ({
        ...field,
        enabled: DEFAULT_ENABLED_FIELD_IDS.includes(field.numericId)
      }));
      buildFieldListUI();
    });

    // Close without saving
    closeModalBtn.addEventListener('click', () => {
      // Reload from localStorage to discard unsaved changes
      loadFieldConfig();
      closeModal();
    });

    // Button to open the modal
    customizeBtn.addEventListener('click', openModal);

    // -----------------------------------------
    // 4) ADDING A NEW FIELD
    // -----------------------------------------
    addFieldBtn.addEventListener('click', () => {
      const numId = parseInt(addFieldId.value.trim(), 10) || null;
      const label = addFieldLabel.value.trim();
      const prop = addFieldProperty.value.trim();

      if (!label || !prop) {
        alert('Please provide at least a Label and a Property Name.');
        return;
      }

      // Create new field object
      const newField = {
        numericId: numId,
        label,
        propertyName: prop,
        enabled: true // new fields default to enabled
      };

      // Add to currentFieldsList
      currentFieldsList.push(newField);
      buildFieldListUI();

      // Clear form
      addFieldId.value = '';
      addFieldLabel.value = '';
      addFieldProperty.value = '';
    });

    // -----------------------------------------
    // 5) DECODING LOGIC
    // -----------------------------------------
    decodeBtn.addEventListener('click', async () => {
      const vinList = vinInput.value
        .split(/\n/g)
        .map(v => v.trim())
        .filter(v => v !== '');
      
      if (!vinList.length) {
        alert('No VINs entered!');
        return;
      }
      
      const batchString = vinList.join(';');
      
      try {
        // For docs, see: https://vpic.nhtsa.dot.gov/api/Home/Index/70
        const response = await fetch('https://vpic.nhtsa.dot.gov/api/vehicles/DecodeVINValuesBatch/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: new URLSearchParams({
            format: 'json',
            data: batchString
          })
        });
        
        const data = await response.json();
        const results = data.Results || [];
        
        // Clear old results
        resultsContainer.innerHTML = '';

        results.forEach((decodedItem, idx) => {
          const vinDiv = document.createElement('div');
          
          // Show the VIN at the top
          const vinHeader = document.createElement('h3');
          vinHeader.innerText = `#${idx + 1} VIN: ${decodedItem.VIN || ''}`;
          vinDiv.appendChild(vinHeader);
          
          // Copy single VIN data
          const copyBtn = document.createElement('button');
          copyBtn.innerText = 'Copy This VIN Data';
          copyBtn.style.marginBottom = '8px';
          copyBtn.addEventListener('click', () => {
            const rowData = getRowData(decodedItem);
            navigator.clipboard.writeText(rowData).then(() => {
              alert(`Copied data for VIN: ${decodedItem.VIN}`);
            }, () => {
              alert('Unable to copy.');
            });
          });
          
          vinDiv.appendChild(copyBtn);
          
          // Optionally show a list of the data
          const dataList = document.createElement('ul');
          
          // Only iterate over "enabled" fields in the current order
          currentFieldsList.forEach(field => {
            if (field.enabled) {
              const li = document.createElement('li');
              const value = decodedItem[field.propertyName] || '';
              li.textContent = `${field.label}: ${value}`;
              dataList.appendChild(li);
            }
          });
          
          vinDiv.appendChild(dataList);
          resultsContainer.appendChild(vinDiv);
        });
        
        // Copy ALL button if multiple results
        if (results.length > 1) {
          const copyAllBtn = document.createElement('button');
          copyAllBtn.innerText = 'Copy ALL VIN Data';
          copyAllBtn.style.display = 'block';
          copyAllBtn.style.marginTop = '16px';
          
          copyAllBtn.addEventListener('click', () => {
            const lines = results.map(item => getRowData(item));
            const finalString = lines.join('\n');
            navigator.clipboard.writeText(finalString).then(() => {
              alert('Copied all VIN data to clipboard!');
            }, () => {
              alert('Unable to copy.');
            });
          });
          
          resultsContainer.appendChild(copyAllBtn);
        }

      } catch (err) {
        console.error(err);
        alert('Error fetching VIN decode. Check console for details.');
      }
    });

    // Helper to generate a single line (TSV) for one VIN
    function getRowData(decodedItem) {
      const rowValues = currentFieldsList
        .filter(field => field.enabled)
        .map(field => decodedItem[field.propertyName] || '');
      return rowValues.join('\t');
    }

    // Clear / Reset
    clearBtn.addEventListener('click', () => {
      vinInput.value = '';
      resultsContainer.innerHTML = '';
    });
  </script>
</body>
</html>
